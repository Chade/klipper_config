# Mainsail klipper definitions
#
# Copyright (C) 2021 Alex Zellner <alexander.zellner@googlemail.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license
#
# Version 1.7

[virtual_sdcard]
path: /home/pi/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[pause_resume]

[display_status]

[idle_timeout]
timeout: 3600
gcode:
  # Send message
  {action_respond_info("Printer going to sleep...")}

  # Turn motors off
  M84

  # Turn part cooling fan off
  M107

  # Turn exhaust fan off
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0

  # Turn heaters off
  TURN_OFF_HEATERS

  # Turn led lights off
  SET_PIN PIN=led_lights VALUE=0


#####################################################################
#  Macros for cleaning
#####################################################################

[include /home/pi/klipper_config/cleaning.cfg]

#####################################################################
#  Macro SWITCH_LIGHT
#####################################################################

[gcode_macro SWITCH_LIGHT]
description: Toggle build room lights
gcode:
  {% if printer["output_pin led_lights"].value == 1 %}
    SET_PIN PIN=led_lights VALUE=0
  {% else %}
    SET_PIN PIN=led_lights VALUE=1
  {% endif %}


#####################################################################
#  Macro PREPARE
#####################################################################

[gcode_macro PRINT_PREPARE]
description: Prepare for printing
gcode:
  {% set enable_park  = params.PARK|default('') %}
  {% set enable_wipe  = params.WIPE|default('true') %}
  {% set enable_purge = params.PURGE|default('false') %}

  # Home if needed
  {% if not "xyz" in printer.toolhead.homed_axes %}
    {action_respond_info("PRINT_PREPARE: Home")}
    G28
  {% else %}
    {action_respond_info("PRINT_PREPARE: Already homed")}
  {% endif %}

  # Do quad gantry leveling
  {action_respond_info("PRINT_PREPARE: Quad gantry level")}
  QUAD_GANTRY_LEVEL

  # Home z axis
  {action_respond_info("PRINT_PREPARE: Home Z")}
  G28 Z

  # Wipe nozzle
  {% if enable_wipe|lower == 'true' %}
    {action_respond_info("PRINT_PREPARE: Clean nozzle")}
    CLEAN_NOZZLE PURGE={enable_purge}

    # Home z axis again with clean nozzle
    {action_respond_info("PRINT_PREPARE: Home Z again")}
    G28 Z
  {% else %}
    {action_respond_info("PRINT_PREPARE: Skip cleaning")}
  {% endif %}

  # Park if requested
  {% if enable_park|length %}
    {action_respond_info("PRINT_PREPARE: Park toolhead")}
    TOOLHEAD_PARK POSITION={enable_park}
  {% endif %}

#####################################################################
#  Macro PRINT_START (for use in slicer starting script)
#####################################################################

[gcode_macro PRINT_START]
gcode:
  # Parameters
  {% set bed_temp = params.BED|int %}
  {% set hotend_temp = params.HOTEND|int %}
  {% set chamber_temp = params.CHAMBER|default(0)|int %}

  # Clear pause state
  CLEAR_PAUSE

  # Turn off pendant led
  SET_PIN PIN=led_pendant VALUE=0

  # Turn on led lights
  SET_PIN PIN=led_lights VALUE=1

  # Preheat bed
  M190 S{bed_temp}

  # Preheat nozzle
  M109 S{hotend_temp}

  # Do a full homing procedure but skip parking
  PRINT_PREPARE WIPE=true PURGE=true
   
#####################################################################
#  Macro PRINT_END (for use in slicer ending script)
#####################################################################

[gcode_macro PRINT_END]
gcode:
  # Wait for buffer to clear
  M400

  # Turn part cooling fan off
  M107

  # Turn exhaust fan off
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0

  # Turn heaters off
  TURN_OFF_HEATERS

  # Park toolhead
  TOOLHEAD_PARK POSITION=Back

  # Turn motors off
  M84

#####################################################################
#  Macro CANCEL_PRINT
#####################################################################

[gcode_macro CANCEL_PRINT]
description: Cancel the running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  {% if not printer.pause_resume.is_paused %}
    # Lift toolhead to reduce stringing
    TOOLHEAD_LIFT
  {% else %}
    # Clear pause state
    CLEAR_PAUSE
    # Turn pendant led off
    SET_PIN PIN=led_pendant VALUE=0
  {% endif %}

  # Turn part cooling fan off
  M107

  # Turn exhaust fan off
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0

  # Turn heaters off
  TURN_OFF_HEATERS

  #Park toolhead
  TOOLHEAD_PARK POSITION=Back

  # Call initial cancel macro
  CANCEL_PRINT_BASE

#####################################################################
#  Macro PAUSE
#####################################################################

[gcode_macro PAUSE]
description: Pause the running print
rename_existing: PAUSE_BASE
gcode:
  {% if printer.pause_resume.is_paused == false %}
    # Call initial pause macro
    PAUSE_BASE

    # Lift toolhead to reduce stringing
    TOOLHEAD_LIFT

    # Bring toolhead to service position
    TOOLHEAD_PARK POSITION=front

    # Turn pendant led on
    SET_PIN PIN=led_pendant VALUE=1
  {% else %}
    {action_respond_info("PAUSE: Printer already paused")}
  {% endif %}

#####################################################################
#  Macro RESUME
#####################################################################

[gcode_macro RESUME]
description: Resume the running print
rename_existing: RESUME_BASE
gcode:
  {% set extrude = printer['gcode_macro TOOLHEAD_LIFT'].retract_dist %}
  {% if printer.pause_resume.is_paused %}
    # Turn pendant led off
    SET_PIN PIN=led_pendant VALUE=0

    # Fill nozzle with filament
    SAVE_GCODE_STATE NAME=STATE_RESUME

    {% if printer.extruder.can_extrude %}
      M83
      G1 E{extrude} F2100
    {% else %}
      {action_respond_info("RESUME: Extruder not hot enough!")}
    {% endif %}

    RESTORE_GCODE_STATE NAME=STATE_RESUME

    # Call initial resume macro
    RESUME_BASE {rawparams}
  {% else %}
    {action_respond_info("RESUME: Printer already resumed")}
  {% endif %}

#####################################################################
#  Macro TOOLHEAD_LIFT
#####################################################################

[gcode_macro TOOLHEAD_LIFT]
description: Safely lift toolhead
variable_retract_dist: 2.0
variable_move_dist: 10.0
variable_lift_dist: 1.0
gcode:
  # Set position for save move to prevent stringing
  {% set x_safe =  printer.toolhead.position.x|float + move_dist * (1 if printer.toolhead.axis_maximum.x|float - printer.toolhead.position.x|float > move_dist else -1) %}
  {% set y_safe =  printer.toolhead.position.y|float + move_dist * (1 if printer.toolhead.axis_maximum.y|float - printer.toolhead.position.y|float > move_dist else -1) %}
  {% set z_safe = [printer.toolhead.position.z|float + lift_dist, printer.toolhead.axis_maximum.z|float]|min %}

  SAVE_GCODE_STATE NAME=STATE_TOOLHEAD_LIFT

  # Retract filament
  {% if printer.extruder.can_extrude %}
    M83
    G0 E-{retract_dist} F3600
  {% else %}
    {action_respond_info("TOOLHEAD_LIFT: Extruder not hot enough for retract!")}
  {% endif %}

  # Move toolhead a safe distance
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G0 X{x_safe} Y{y_safe} Z{z_safe} F18000
  {% else %}
    {action_respond_info("TOOLHEAD_LIFT: Printer not homed!")}
  {% endif %}

  RESTORE_GCODE_STATE NAME=STATE_TOOLHEAD_LIFT

#####################################################################
#  Macro TOOLHEAD_PARK
#####################################################################

[gcode_macro TOOLHEAD_PARK]
description: Park toolhead
gcode:
  # Get params
  {% set position = params.POSITION|default('back') %}
  {action_respond_info("TOOLHEAD_PARK %s" % (position|upper))}

  # Set park position for x and y
  {% set x_park = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% if position|lower == 'back' %}
    {% set y_park = printer.toolhead.axis_maximum.y|float %}
  {% elif position|lower == 'front' %}
    {% set y_park = printer.toolhead.axis_minimum.y|float %}
  {% else %}
    {% set y_park = position|float %}
  {% endif %}

  # Calculate save z position
  {% set z_max = printer.toolhead.axis_maximum.z|float %}
  {% set z_act = printer.toolhead.position.z|float %}
  {% set z_park = [z_act, (z_max / 3.0)]|max %}

  SAVE_GCODE_STATE NAME=STATE_TOOLHEAD_PARK

  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G0 X{x_park} Y{y_park} Z{z_park} F6000
  {% else %}
    {action_respond_info("TOOLHEAD_PARK: Printer not homed!")}
  {% endif %}

  RESTORE_GCODE_STATE NAME=STATE_TOOLHEAD_PARK

#####################################################################
#  Macro UNLOAD_FILAMENT
#####################################################################

[gcode_macro UNLOAD_FILAMENT]
description: Heat up nozzle and unload filament
gcode:
  {% set speed = [params.SPEED|default(600.0), 600.0]|max %}
  {% set temperature = params.TEMPERATURE|default(230.0) %}

  SAVE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT

  # Set temperature and wait
  M109 S{temperature}

  M117 Start unloading filament...

  # Retract filament
  G91
  G0 E-40.0 F{speed}
  G0 E-40.0 F{speed}

  # Wait for extrusion to finish
  M400

  # Turn heater off
  M104 S0

  M117 Filament unloaded

  RESTORE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT

#####################################################################
#  Macro LOAD_FILAMENT
#####################################################################

[gcode_macro LOAD_FILAMENT]
description: Heat up nozzle and load filament
gcode:
  {% set speed = [params.SPEED|default(600.0), 600.0]|max %}
  {% set temperature = params.TEMPERATURE|default(230.0) %}

  SAVE_GCODE_STATE NAME=STATE_LOAD_FILAMENT

  # Set temperature and wait
  M109 S{temperature}

  M117 Start loading filament...

  # Retract filament
  G91
  G0 E40.0 F{speed}
  G0 E40.0 F{speed|float / 2.0}
  G0 E40.0 F{speed|float / 3.0}

  # Wait for extrusion to finish
  M400

  # Turn heater off
  M104 S0

  M117 Filament loaded

  RESTORE_GCODE_STATE NAME=STATE_LOAD_FILAMENT

#####################################################################
#  Macro TEST_SPEED
#####################################################################

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(1)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED
